# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bmirobot_msg/motorv2_fd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motorv2_fd(genpy.Message):
  _md5sum = "a5d41159e774c193e38fa281a354be65"
  _type = "bmirobot_msg/motorv2_fd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[8] mt_position
int32[8] mt_speed
int16[8] mt_pwm
int16[8] mt_current"""
  __slots__ = ['mt_position','mt_speed','mt_pwm','mt_current']
  _slot_types = ['int32[8]','int32[8]','int16[8]','int16[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mt_position,mt_speed,mt_pwm,mt_current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motorv2_fd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mt_position is None:
        self.mt_position = [0] * 8
      if self.mt_speed is None:
        self.mt_speed = [0] * 8
      if self.mt_pwm is None:
        self.mt_pwm = [0] * 8
      if self.mt_current is None:
        self.mt_current = [0] * 8
    else:
      self.mt_position = [0] * 8
      self.mt_speed = [0] * 8
      self.mt_pwm = [0] * 8
      self.mt_current = [0] * 8

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_8i().pack(*self.mt_position))
      buff.write(_get_struct_8i().pack(*self.mt_speed))
      buff.write(_get_struct_8h().pack(*self.mt_pwm))
      buff.write(_get_struct_8h().pack(*self.mt_current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 32
      self.mt_position = _get_struct_8i().unpack(str[start:end])
      start = end
      end += 32
      self.mt_speed = _get_struct_8i().unpack(str[start:end])
      start = end
      end += 16
      self.mt_pwm = _get_struct_8h().unpack(str[start:end])
      start = end
      end += 16
      self.mt_current = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.mt_position.tostring())
      buff.write(self.mt_speed.tostring())
      buff.write(self.mt_pwm.tostring())
      buff.write(self.mt_current.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 32
      self.mt_position = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=8)
      start = end
      end += 32
      self.mt_speed = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=8)
      start = end
      end += 16
      self.mt_pwm = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=8)
      start = end
      end += 16
      self.mt_current = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8h = None
def _get_struct_8h():
    global _struct_8h
    if _struct_8h is None:
        _struct_8h = struct.Struct("<8h")
    return _struct_8h
_struct_8i = None
def _get_struct_8i():
    global _struct_8i
    if _struct_8i is None:
        _struct_8i = struct.Struct("<8i")
    return _struct_8i
