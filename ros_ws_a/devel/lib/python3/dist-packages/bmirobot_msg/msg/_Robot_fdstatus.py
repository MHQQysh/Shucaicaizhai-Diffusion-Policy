# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bmirobot_msg/Robot_fdstatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Robot_fdstatus(genpy.Message):
  _md5sum = "96575b502188e773da8e23f3a4f7ae68"
  _type = "bmirobot_msg/Robot_fdstatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[9] mt_mode
int32[9] mt_Gpst
int32[9] mt_Cpst
int32[9] mt_Lpst
int32[9] mt_Gspd
int32[9] mt_Cspd
int32[9] mt_Lspd
int32[9] mt_Gtq
int32[9] mt_PWMduty
int32[9] mt_Gtime
int32[9] mt_Ctime
int32[9] mt_Rtime
int32[9] mt_sysclk
int32[9] mt_smptime
int32[9] mt_cputmp
int32[9] mt_mttmp
int32[9] mt_invlt
int32[9] mt_incrt
int32[9] mt_PWMfrq
int32[9] mt_ecd
int32[9] mt_ecdcnt"""
  __slots__ = ['mt_mode','mt_Gpst','mt_Cpst','mt_Lpst','mt_Gspd','mt_Cspd','mt_Lspd','mt_Gtq','mt_PWMduty','mt_Gtime','mt_Ctime','mt_Rtime','mt_sysclk','mt_smptime','mt_cputmp','mt_mttmp','mt_invlt','mt_incrt','mt_PWMfrq','mt_ecd','mt_ecdcnt']
  _slot_types = ['int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]','int32[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mt_mode,mt_Gpst,mt_Cpst,mt_Lpst,mt_Gspd,mt_Cspd,mt_Lspd,mt_Gtq,mt_PWMduty,mt_Gtime,mt_Ctime,mt_Rtime,mt_sysclk,mt_smptime,mt_cputmp,mt_mttmp,mt_invlt,mt_incrt,mt_PWMfrq,mt_ecd,mt_ecdcnt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Robot_fdstatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mt_mode is None:
        self.mt_mode = [0] * 9
      if self.mt_Gpst is None:
        self.mt_Gpst = [0] * 9
      if self.mt_Cpst is None:
        self.mt_Cpst = [0] * 9
      if self.mt_Lpst is None:
        self.mt_Lpst = [0] * 9
      if self.mt_Gspd is None:
        self.mt_Gspd = [0] * 9
      if self.mt_Cspd is None:
        self.mt_Cspd = [0] * 9
      if self.mt_Lspd is None:
        self.mt_Lspd = [0] * 9
      if self.mt_Gtq is None:
        self.mt_Gtq = [0] * 9
      if self.mt_PWMduty is None:
        self.mt_PWMduty = [0] * 9
      if self.mt_Gtime is None:
        self.mt_Gtime = [0] * 9
      if self.mt_Ctime is None:
        self.mt_Ctime = [0] * 9
      if self.mt_Rtime is None:
        self.mt_Rtime = [0] * 9
      if self.mt_sysclk is None:
        self.mt_sysclk = [0] * 9
      if self.mt_smptime is None:
        self.mt_smptime = [0] * 9
      if self.mt_cputmp is None:
        self.mt_cputmp = [0] * 9
      if self.mt_mttmp is None:
        self.mt_mttmp = [0] * 9
      if self.mt_invlt is None:
        self.mt_invlt = [0] * 9
      if self.mt_incrt is None:
        self.mt_incrt = [0] * 9
      if self.mt_PWMfrq is None:
        self.mt_PWMfrq = [0] * 9
      if self.mt_ecd is None:
        self.mt_ecd = [0] * 9
      if self.mt_ecdcnt is None:
        self.mt_ecdcnt = [0] * 9
    else:
      self.mt_mode = [0] * 9
      self.mt_Gpst = [0] * 9
      self.mt_Cpst = [0] * 9
      self.mt_Lpst = [0] * 9
      self.mt_Gspd = [0] * 9
      self.mt_Cspd = [0] * 9
      self.mt_Lspd = [0] * 9
      self.mt_Gtq = [0] * 9
      self.mt_PWMduty = [0] * 9
      self.mt_Gtime = [0] * 9
      self.mt_Ctime = [0] * 9
      self.mt_Rtime = [0] * 9
      self.mt_sysclk = [0] * 9
      self.mt_smptime = [0] * 9
      self.mt_cputmp = [0] * 9
      self.mt_mttmp = [0] * 9
      self.mt_invlt = [0] * 9
      self.mt_incrt = [0] * 9
      self.mt_PWMfrq = [0] * 9
      self.mt_ecd = [0] * 9
      self.mt_ecdcnt = [0] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_9i().pack(*self.mt_mode))
      buff.write(_get_struct_9i().pack(*self.mt_Gpst))
      buff.write(_get_struct_9i().pack(*self.mt_Cpst))
      buff.write(_get_struct_9i().pack(*self.mt_Lpst))
      buff.write(_get_struct_9i().pack(*self.mt_Gspd))
      buff.write(_get_struct_9i().pack(*self.mt_Cspd))
      buff.write(_get_struct_9i().pack(*self.mt_Lspd))
      buff.write(_get_struct_9i().pack(*self.mt_Gtq))
      buff.write(_get_struct_9i().pack(*self.mt_PWMduty))
      buff.write(_get_struct_9i().pack(*self.mt_Gtime))
      buff.write(_get_struct_9i().pack(*self.mt_Ctime))
      buff.write(_get_struct_9i().pack(*self.mt_Rtime))
      buff.write(_get_struct_9i().pack(*self.mt_sysclk))
      buff.write(_get_struct_9i().pack(*self.mt_smptime))
      buff.write(_get_struct_9i().pack(*self.mt_cputmp))
      buff.write(_get_struct_9i().pack(*self.mt_mttmp))
      buff.write(_get_struct_9i().pack(*self.mt_invlt))
      buff.write(_get_struct_9i().pack(*self.mt_incrt))
      buff.write(_get_struct_9i().pack(*self.mt_PWMfrq))
      buff.write(_get_struct_9i().pack(*self.mt_ecd))
      buff.write(_get_struct_9i().pack(*self.mt_ecdcnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 36
      self.mt_mode = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Gpst = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Cpst = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Lpst = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Gspd = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Cspd = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Lspd = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Gtq = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_PWMduty = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Gtime = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Ctime = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_Rtime = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_sysclk = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_smptime = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_cputmp = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_mttmp = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_invlt = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_incrt = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_PWMfrq = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_ecd = _get_struct_9i().unpack(str[start:end])
      start = end
      end += 36
      self.mt_ecdcnt = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.mt_mode.tostring())
      buff.write(self.mt_Gpst.tostring())
      buff.write(self.mt_Cpst.tostring())
      buff.write(self.mt_Lpst.tostring())
      buff.write(self.mt_Gspd.tostring())
      buff.write(self.mt_Cspd.tostring())
      buff.write(self.mt_Lspd.tostring())
      buff.write(self.mt_Gtq.tostring())
      buff.write(self.mt_PWMduty.tostring())
      buff.write(self.mt_Gtime.tostring())
      buff.write(self.mt_Ctime.tostring())
      buff.write(self.mt_Rtime.tostring())
      buff.write(self.mt_sysclk.tostring())
      buff.write(self.mt_smptime.tostring())
      buff.write(self.mt_cputmp.tostring())
      buff.write(self.mt_mttmp.tostring())
      buff.write(self.mt_invlt.tostring())
      buff.write(self.mt_incrt.tostring())
      buff.write(self.mt_PWMfrq.tostring())
      buff.write(self.mt_ecd.tostring())
      buff.write(self.mt_ecdcnt.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 36
      self.mt_mode = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Gpst = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Cpst = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Lpst = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Gspd = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Cspd = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Lspd = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Gtq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_PWMduty = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Gtime = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Ctime = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_Rtime = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_sysclk = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_smptime = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_cputmp = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_mttmp = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_invlt = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_incrt = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_PWMfrq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_ecd = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      start = end
      end += 36
      self.mt_ecdcnt = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9i = None
def _get_struct_9i():
    global _struct_9i
    if _struct_9i is None:
        _struct_9i = struct.Struct("<9i")
    return _struct_9i
