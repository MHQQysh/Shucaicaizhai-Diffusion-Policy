// Generated by gencpp from file bmirobot_msg/Robot_ctr.msg
// DO NOT EDIT!


#ifndef BMIROBOT_MSG_MESSAGE_ROBOT_CTR_H
#define BMIROBOT_MSG_MESSAGE_ROBOT_CTR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bmirobot_msg
{
template <class ContainerAllocator>
struct Robot_ctr_
{
  typedef Robot_ctr_<ContainerAllocator> Type;

  Robot_ctr_()
    : mtID()
    , mtmode()
    , mtpst()
    , mtspd()
    , mttq()  {
      mtID.assign(0);

      mtmode.assign(0);

      mtpst.assign(0);

      mtspd.assign(0);

      mttq.assign(0);
  }
  Robot_ctr_(const ContainerAllocator& _alloc)
    : mtID()
    , mtmode()
    , mtpst()
    , mtspd()
    , mttq()  {
  (void)_alloc;
      mtID.assign(0);

      mtmode.assign(0);

      mtpst.assign(0);

      mtspd.assign(0);

      mttq.assign(0);
  }



   typedef boost::array<int32_t, 9>  _mtID_type;
  _mtID_type mtID;

   typedef boost::array<int32_t, 9>  _mtmode_type;
  _mtmode_type mtmode;

   typedef boost::array<int32_t, 9>  _mtpst_type;
  _mtpst_type mtpst;

   typedef boost::array<int32_t, 9>  _mtspd_type;
  _mtspd_type mtspd;

   typedef boost::array<int32_t, 9>  _mttq_type;
  _mttq_type mttq;





  typedef boost::shared_ptr< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> const> ConstPtr;

}; // struct Robot_ctr_

typedef ::bmirobot_msg::Robot_ctr_<std::allocator<void> > Robot_ctr;

typedef boost::shared_ptr< ::bmirobot_msg::Robot_ctr > Robot_ctrPtr;
typedef boost::shared_ptr< ::bmirobot_msg::Robot_ctr const> Robot_ctrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bmirobot_msg::Robot_ctr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bmirobot_msg::Robot_ctr_<ContainerAllocator1> & lhs, const ::bmirobot_msg::Robot_ctr_<ContainerAllocator2> & rhs)
{
  return lhs.mtID == rhs.mtID &&
    lhs.mtmode == rhs.mtmode &&
    lhs.mtpst == rhs.mtpst &&
    lhs.mtspd == rhs.mtspd &&
    lhs.mttq == rhs.mttq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bmirobot_msg::Robot_ctr_<ContainerAllocator1> & lhs, const ::bmirobot_msg::Robot_ctr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bmirobot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fc2a2db85d9265b43f59ed7bec2ae3c";
  }

  static const char* value(const ::bmirobot_msg::Robot_ctr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fc2a2db85d9265bULL;
  static const uint64_t static_value2 = 0x43f59ed7bec2ae3cULL;
};

template<class ContainerAllocator>
struct DataType< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bmirobot_msg/Robot_ctr";
  }

  static const char* value(const ::bmirobot_msg::Robot_ctr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[9] mtID\n"
"int32[9] mtmode\n"
"int32[9] mtpst\n"
"int32[9] mtspd\n"
"int32[9] mttq\n"
;
  }

  static const char* value(const ::bmirobot_msg::Robot_ctr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mtID);
      stream.next(m.mtmode);
      stream.next(m.mtpst);
      stream.next(m.mtspd);
      stream.next(m.mttq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Robot_ctr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bmirobot_msg::Robot_ctr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bmirobot_msg::Robot_ctr_<ContainerAllocator>& v)
  {
    s << indent << "mtID[]" << std::endl;
    for (size_t i = 0; i < v.mtID.size(); ++i)
    {
      s << indent << "  mtID[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mtID[i]);
    }
    s << indent << "mtmode[]" << std::endl;
    for (size_t i = 0; i < v.mtmode.size(); ++i)
    {
      s << indent << "  mtmode[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mtmode[i]);
    }
    s << indent << "mtpst[]" << std::endl;
    for (size_t i = 0; i < v.mtpst.size(); ++i)
    {
      s << indent << "  mtpst[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mtpst[i]);
    }
    s << indent << "mtspd[]" << std::endl;
    for (size_t i = 0; i < v.mtspd.size(); ++i)
    {
      s << indent << "  mtspd[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mtspd[i]);
    }
    s << indent << "mttq[]" << std::endl;
    for (size_t i = 0; i < v.mttq.size(); ++i)
    {
      s << indent << "  mttq[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mttq[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BMIROBOT_MSG_MESSAGE_ROBOT_CTR_H
