// Generated by gencpp from file bmirobot_msg/motorv2_ctr.msg
// DO NOT EDIT!


#ifndef BMIROBOT_MSG_MESSAGE_MOTORV2_CTR_H
#define BMIROBOT_MSG_MESSAGE_MOTORV2_CTR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bmirobot_msg
{
template <class ContainerAllocator>
struct motorv2_ctr_
{
  typedef motorv2_ctr_<ContainerAllocator> Type;

  motorv2_ctr_()
    : mt_operation_mode()
    , mt_position_goal()
    , mt_speed_goal()
    , mt_current_goal()
    , mt_pwm_goal()  {
      mt_operation_mode.assign(0);

      mt_position_goal.assign(0);

      mt_speed_goal.assign(0);

      mt_current_goal.assign(0);

      mt_pwm_goal.assign(0);
  }
  motorv2_ctr_(const ContainerAllocator& _alloc)
    : mt_operation_mode()
    , mt_position_goal()
    , mt_speed_goal()
    , mt_current_goal()
    , mt_pwm_goal()  {
  (void)_alloc;
      mt_operation_mode.assign(0);

      mt_position_goal.assign(0);

      mt_speed_goal.assign(0);

      mt_current_goal.assign(0);

      mt_pwm_goal.assign(0);
  }



   typedef boost::array<int8_t, 8>  _mt_operation_mode_type;
  _mt_operation_mode_type mt_operation_mode;

   typedef boost::array<int32_t, 8>  _mt_position_goal_type;
  _mt_position_goal_type mt_position_goal;

   typedef boost::array<int32_t, 8>  _mt_speed_goal_type;
  _mt_speed_goal_type mt_speed_goal;

   typedef boost::array<int32_t, 8>  _mt_current_goal_type;
  _mt_current_goal_type mt_current_goal;

   typedef boost::array<int32_t, 8>  _mt_pwm_goal_type;
  _mt_pwm_goal_type mt_pwm_goal;





  typedef boost::shared_ptr< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> const> ConstPtr;

}; // struct motorv2_ctr_

typedef ::bmirobot_msg::motorv2_ctr_<std::allocator<void> > motorv2_ctr;

typedef boost::shared_ptr< ::bmirobot_msg::motorv2_ctr > motorv2_ctrPtr;
typedef boost::shared_ptr< ::bmirobot_msg::motorv2_ctr const> motorv2_ctrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator1> & lhs, const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator2> & rhs)
{
  return lhs.mt_operation_mode == rhs.mt_operation_mode &&
    lhs.mt_position_goal == rhs.mt_position_goal &&
    lhs.mt_speed_goal == rhs.mt_speed_goal &&
    lhs.mt_current_goal == rhs.mt_current_goal &&
    lhs.mt_pwm_goal == rhs.mt_pwm_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator1> & lhs, const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bmirobot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28290c9afcbb7e417ea5e1d8b11ed1b4";
  }

  static const char* value(const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28290c9afcbb7e41ULL;
  static const uint64_t static_value2 = 0x7ea5e1d8b11ed1b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bmirobot_msg/motorv2_ctr";
  }

  static const char* value(const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[8] mt_operation_mode\n"
"int32[8] mt_position_goal\n"
"int32[8] mt_speed_goal\n"
"int32[8] mt_current_goal\n"
"int32[8] mt_pwm_goal\n"
;
  }

  static const char* value(const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mt_operation_mode);
      stream.next(m.mt_position_goal);
      stream.next(m.mt_speed_goal);
      stream.next(m.mt_current_goal);
      stream.next(m.mt_pwm_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motorv2_ctr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bmirobot_msg::motorv2_ctr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bmirobot_msg::motorv2_ctr_<ContainerAllocator>& v)
  {
    s << indent << "mt_operation_mode[]" << std::endl;
    for (size_t i = 0; i < v.mt_operation_mode.size(); ++i)
    {
      s << indent << "  mt_operation_mode[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.mt_operation_mode[i]);
    }
    s << indent << "mt_position_goal[]" << std::endl;
    for (size_t i = 0; i < v.mt_position_goal.size(); ++i)
    {
      s << indent << "  mt_position_goal[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_position_goal[i]);
    }
    s << indent << "mt_speed_goal[]" << std::endl;
    for (size_t i = 0; i < v.mt_speed_goal.size(); ++i)
    {
      s << indent << "  mt_speed_goal[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_speed_goal[i]);
    }
    s << indent << "mt_current_goal[]" << std::endl;
    for (size_t i = 0; i < v.mt_current_goal.size(); ++i)
    {
      s << indent << "  mt_current_goal[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_current_goal[i]);
    }
    s << indent << "mt_pwm_goal[]" << std::endl;
    for (size_t i = 0; i < v.mt_pwm_goal.size(); ++i)
    {
      s << indent << "  mt_pwm_goal[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_pwm_goal[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BMIROBOT_MSG_MESSAGE_MOTORV2_CTR_H
