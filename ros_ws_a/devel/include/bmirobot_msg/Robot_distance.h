// Generated by gencpp from file bmirobot_msg/Robot_distance.msg
// DO NOT EDIT!


#ifndef BMIROBOT_MSG_MESSAGE_ROBOT_DISTANCE_H
#define BMIROBOT_MSG_MESSAGE_ROBOT_DISTANCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bmirobot_msg
{
template <class ContainerAllocator>
struct Robot_distance_
{
  typedef Robot_distance_<ContainerAllocator> Type;

  Robot_distance_()
    : proximity()
    , realdistance()  {
      proximity.assign(0);

      realdistance.assign(0);
  }
  Robot_distance_(const ContainerAllocator& _alloc)
    : proximity()
    , realdistance()  {
  (void)_alloc;
      proximity.assign(0);

      realdistance.assign(0);
  }



   typedef boost::array<uint16_t, 25>  _proximity_type;
  _proximity_type proximity;

   typedef boost::array<uint16_t, 25>  _realdistance_type;
  _realdistance_type realdistance;





  typedef boost::shared_ptr< ::bmirobot_msg::Robot_distance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmirobot_msg::Robot_distance_<ContainerAllocator> const> ConstPtr;

}; // struct Robot_distance_

typedef ::bmirobot_msg::Robot_distance_<std::allocator<void> > Robot_distance;

typedef boost::shared_ptr< ::bmirobot_msg::Robot_distance > Robot_distancePtr;
typedef boost::shared_ptr< ::bmirobot_msg::Robot_distance const> Robot_distanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bmirobot_msg::Robot_distance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bmirobot_msg::Robot_distance_<ContainerAllocator1> & lhs, const ::bmirobot_msg::Robot_distance_<ContainerAllocator2> & rhs)
{
  return lhs.proximity == rhs.proximity &&
    lhs.realdistance == rhs.realdistance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bmirobot_msg::Robot_distance_<ContainerAllocator1> & lhs, const ::bmirobot_msg::Robot_distance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bmirobot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::Robot_distance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::Robot_distance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::Robot_distance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68c6629711bc8cca4c5688c4b92123ab";
  }

  static const char* value(const ::bmirobot_msg::Robot_distance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68c6629711bc8ccaULL;
  static const uint64_t static_value2 = 0x4c5688c4b92123abULL;
};

template<class ContainerAllocator>
struct DataType< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bmirobot_msg/Robot_distance";
  }

  static const char* value(const ::bmirobot_msg::Robot_distance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[25] proximity\n"
"uint16[25] realdistance\n"
;
  }

  static const char* value(const ::bmirobot_msg::Robot_distance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.proximity);
      stream.next(m.realdistance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Robot_distance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bmirobot_msg::Robot_distance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bmirobot_msg::Robot_distance_<ContainerAllocator>& v)
  {
    s << indent << "proximity[]" << std::endl;
    for (size_t i = 0; i < v.proximity.size(); ++i)
    {
      s << indent << "  proximity[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.proximity[i]);
    }
    s << indent << "realdistance[]" << std::endl;
    for (size_t i = 0; i < v.realdistance.size(); ++i)
    {
      s << indent << "  realdistance[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.realdistance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BMIROBOT_MSG_MESSAGE_ROBOT_DISTANCE_H
