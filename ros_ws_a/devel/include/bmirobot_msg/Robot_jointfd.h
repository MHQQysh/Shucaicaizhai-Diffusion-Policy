// Generated by gencpp from file bmirobot_msg/Robot_jointfd.msg
// DO NOT EDIT!


#ifndef BMIROBOT_MSG_MESSAGE_ROBOT_JOINTFD_H
#define BMIROBOT_MSG_MESSAGE_ROBOT_JOINTFD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bmirobot_msg
{
template <class ContainerAllocator>
struct Robot_jointfd_
{
  typedef Robot_jointfd_<ContainerAllocator> Type;

  Robot_jointfd_()
    : Joint_fdpst()
    , Joint_fdspd()
    , Joint_fdctr()  {
      Joint_fdpst.assign(0.0);

      Joint_fdspd.assign(0.0);

      Joint_fdctr.assign(0.0);
  }
  Robot_jointfd_(const ContainerAllocator& _alloc)
    : Joint_fdpst()
    , Joint_fdspd()
    , Joint_fdctr()  {
  (void)_alloc;
      Joint_fdpst.assign(0.0);

      Joint_fdspd.assign(0.0);

      Joint_fdctr.assign(0.0);
  }



   typedef boost::array<float, 9>  _Joint_fdpst_type;
  _Joint_fdpst_type Joint_fdpst;

   typedef boost::array<float, 9>  _Joint_fdspd_type;
  _Joint_fdspd_type Joint_fdspd;

   typedef boost::array<float, 9>  _Joint_fdctr_type;
  _Joint_fdctr_type Joint_fdctr;





  typedef boost::shared_ptr< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> const> ConstPtr;

}; // struct Robot_jointfd_

typedef ::bmirobot_msg::Robot_jointfd_<std::allocator<void> > Robot_jointfd;

typedef boost::shared_ptr< ::bmirobot_msg::Robot_jointfd > Robot_jointfdPtr;
typedef boost::shared_ptr< ::bmirobot_msg::Robot_jointfd const> Robot_jointfdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator1> & lhs, const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator2> & rhs)
{
  return lhs.Joint_fdpst == rhs.Joint_fdpst &&
    lhs.Joint_fdspd == rhs.Joint_fdspd &&
    lhs.Joint_fdctr == rhs.Joint_fdctr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator1> & lhs, const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bmirobot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b60b3db716c9968ae69daf16554d81f";
  }

  static const char* value(const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b60b3db716c9968ULL;
  static const uint64_t static_value2 = 0xae69daf16554d81fULL;
};

template<class ContainerAllocator>
struct DataType< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bmirobot_msg/Robot_jointfd";
  }

  static const char* value(const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[9] Joint_fdpst\n"
"float32[9] Joint_fdspd\n"
"float32[9] Joint_fdctr\n"
"\n"
;
  }

  static const char* value(const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Joint_fdpst);
      stream.next(m.Joint_fdspd);
      stream.next(m.Joint_fdctr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Robot_jointfd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bmirobot_msg::Robot_jointfd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bmirobot_msg::Robot_jointfd_<ContainerAllocator>& v)
  {
    s << indent << "Joint_fdpst[]" << std::endl;
    for (size_t i = 0; i < v.Joint_fdpst.size(); ++i)
    {
      s << indent << "  Joint_fdpst[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Joint_fdpst[i]);
    }
    s << indent << "Joint_fdspd[]" << std::endl;
    for (size_t i = 0; i < v.Joint_fdspd.size(); ++i)
    {
      s << indent << "  Joint_fdspd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Joint_fdspd[i]);
    }
    s << indent << "Joint_fdctr[]" << std::endl;
    for (size_t i = 0; i < v.Joint_fdctr.size(); ++i)
    {
      s << indent << "  Joint_fdctr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Joint_fdctr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BMIROBOT_MSG_MESSAGE_ROBOT_JOINTFD_H
