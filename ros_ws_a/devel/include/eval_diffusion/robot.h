// Generated by gencpp from file eval_diffusion/robot.msg
// DO NOT EDIT!


#ifndef EVAL_DIFFUSION_MESSAGE_ROBOT_H
#define EVAL_DIFFUSION_MESSAGE_ROBOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace eval_diffusion
{
template <class ContainerAllocator>
struct robot_
{
  typedef robot_<ContainerAllocator> Type;

  robot_()
    : joint_pos()
    , joint_spd()
    , eff_pose()
    , eff_spd()
    , timestamp(0.0)  {
      joint_pos.assign(0.0);

      joint_spd.assign(0.0);

      eff_pose.assign(0.0);

      eff_spd.assign(0.0);
  }
  robot_(const ContainerAllocator& _alloc)
    : joint_pos()
    , joint_spd()
    , eff_pose()
    , eff_spd()
    , timestamp(0.0)  {
  (void)_alloc;
      joint_pos.assign(0.0);

      joint_spd.assign(0.0);

      eff_pose.assign(0.0);

      eff_spd.assign(0.0);
  }



   typedef boost::array<double, 9>  _joint_pos_type;
  _joint_pos_type joint_pos;

   typedef boost::array<double, 9>  _joint_spd_type;
  _joint_spd_type joint_spd;

   typedef boost::array<double, 6>  _eff_pose_type;
  _eff_pose_type eff_pose;

   typedef boost::array<double, 6>  _eff_spd_type;
  _eff_spd_type eff_spd;

   typedef double _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::eval_diffusion::robot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eval_diffusion::robot_<ContainerAllocator> const> ConstPtr;

}; // struct robot_

typedef ::eval_diffusion::robot_<std::allocator<void> > robot;

typedef boost::shared_ptr< ::eval_diffusion::robot > robotPtr;
typedef boost::shared_ptr< ::eval_diffusion::robot const> robotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eval_diffusion::robot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eval_diffusion::robot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eval_diffusion::robot_<ContainerAllocator1> & lhs, const ::eval_diffusion::robot_<ContainerAllocator2> & rhs)
{
  return lhs.joint_pos == rhs.joint_pos &&
    lhs.joint_spd == rhs.joint_spd &&
    lhs.eff_pose == rhs.eff_pose &&
    lhs.eff_spd == rhs.eff_spd &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eval_diffusion::robot_<ContainerAllocator1> & lhs, const ::eval_diffusion::robot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eval_diffusion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::eval_diffusion::robot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eval_diffusion::robot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eval_diffusion::robot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eval_diffusion::robot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eval_diffusion::robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eval_diffusion::robot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eval_diffusion::robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40052a2da386ad976e3644364a1e9279";
  }

  static const char* value(const ::eval_diffusion::robot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40052a2da386ad97ULL;
  static const uint64_t static_value2 = 0x6e3644364a1e9279ULL;
};

template<class ContainerAllocator>
struct DataType< ::eval_diffusion::robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eval_diffusion/robot";
  }

  static const char* value(const ::eval_diffusion::robot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eval_diffusion::robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[9] joint_pos\n"
"float64[9] joint_spd\n"
"float64[6] eff_pose\n"
"float64[6] eff_spd\n"
"float64 timestamp\n"
;
  }

  static const char* value(const ::eval_diffusion::robot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eval_diffusion::robot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_pos);
      stream.next(m.joint_spd);
      stream.next(m.eff_pose);
      stream.next(m.eff_spd);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eval_diffusion::robot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eval_diffusion::robot_<ContainerAllocator>& v)
  {
    s << indent << "joint_pos[]" << std::endl;
    for (size_t i = 0; i < v.joint_pos.size(); ++i)
    {
      s << indent << "  joint_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_pos[i]);
    }
    s << indent << "joint_spd[]" << std::endl;
    for (size_t i = 0; i < v.joint_spd.size(); ++i)
    {
      s << indent << "  joint_spd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_spd[i]);
    }
    s << indent << "eff_pose[]" << std::endl;
    for (size_t i = 0; i < v.eff_pose.size(); ++i)
    {
      s << indent << "  eff_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eff_pose[i]);
    }
    s << indent << "eff_spd[]" << std::endl;
    for (size_t i = 0; i < v.eff_spd.size(); ++i)
    {
      s << indent << "  eff_spd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eff_spd[i]);
    }
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EVAL_DIFFUSION_MESSAGE_ROBOT_H
