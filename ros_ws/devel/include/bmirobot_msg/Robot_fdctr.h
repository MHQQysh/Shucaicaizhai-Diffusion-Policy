// Generated by gencpp from file bmirobot_msg/Robot_fdctr.msg
// DO NOT EDIT!


#ifndef BMIROBOT_MSG_MESSAGE_ROBOT_FDCTR_H
#define BMIROBOT_MSG_MESSAGE_ROBOT_FDCTR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bmirobot_msg
{
template <class ContainerAllocator>
struct Robot_fdctr_
{
  typedef Robot_fdctr_<ContainerAllocator> Type;

  Robot_fdctr_()
    : mt_mode()
    , mt_Cpst()
    , mt_Cspd()
    , mt_incrt()
    , mt_PWMduty()  {
      mt_mode.assign(0);

      mt_Cpst.assign(0);

      mt_Cspd.assign(0);

      mt_incrt.assign(0);

      mt_PWMduty.assign(0);
  }
  Robot_fdctr_(const ContainerAllocator& _alloc)
    : mt_mode()
    , mt_Cpst()
    , mt_Cspd()
    , mt_incrt()
    , mt_PWMduty()  {
  (void)_alloc;
      mt_mode.assign(0);

      mt_Cpst.assign(0);

      mt_Cspd.assign(0);

      mt_incrt.assign(0);

      mt_PWMduty.assign(0);
  }



   typedef boost::array<int32_t, 9>  _mt_mode_type;
  _mt_mode_type mt_mode;

   typedef boost::array<int32_t, 9>  _mt_Cpst_type;
  _mt_Cpst_type mt_Cpst;

   typedef boost::array<int32_t, 9>  _mt_Cspd_type;
  _mt_Cspd_type mt_Cspd;

   typedef boost::array<int32_t, 9>  _mt_incrt_type;
  _mt_incrt_type mt_incrt;

   typedef boost::array<int32_t, 9>  _mt_PWMduty_type;
  _mt_PWMduty_type mt_PWMduty;





  typedef boost::shared_ptr< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> const> ConstPtr;

}; // struct Robot_fdctr_

typedef ::bmirobot_msg::Robot_fdctr_<std::allocator<void> > Robot_fdctr;

typedef boost::shared_ptr< ::bmirobot_msg::Robot_fdctr > Robot_fdctrPtr;
typedef boost::shared_ptr< ::bmirobot_msg::Robot_fdctr const> Robot_fdctrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator1> & lhs, const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator2> & rhs)
{
  return lhs.mt_mode == rhs.mt_mode &&
    lhs.mt_Cpst == rhs.mt_Cpst &&
    lhs.mt_Cspd == rhs.mt_Cspd &&
    lhs.mt_incrt == rhs.mt_incrt &&
    lhs.mt_PWMduty == rhs.mt_PWMduty;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator1> & lhs, const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bmirobot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3195cf007256e8ddfd66fc62f56f5233";
  }

  static const char* value(const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3195cf007256e8ddULL;
  static const uint64_t static_value2 = 0xfd66fc62f56f5233ULL;
};

template<class ContainerAllocator>
struct DataType< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bmirobot_msg/Robot_fdctr";
  }

  static const char* value(const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[9] mt_mode\n"
"int32[9] mt_Cpst\n"
"int32[9] mt_Cspd\n"
"int32[9] mt_incrt\n"
"int32[9] mt_PWMduty\n"
;
  }

  static const char* value(const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mt_mode);
      stream.next(m.mt_Cpst);
      stream.next(m.mt_Cspd);
      stream.next(m.mt_incrt);
      stream.next(m.mt_PWMduty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Robot_fdctr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bmirobot_msg::Robot_fdctr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bmirobot_msg::Robot_fdctr_<ContainerAllocator>& v)
  {
    s << indent << "mt_mode[]" << std::endl;
    for (size_t i = 0; i < v.mt_mode.size(); ++i)
    {
      s << indent << "  mt_mode[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_mode[i]);
    }
    s << indent << "mt_Cpst[]" << std::endl;
    for (size_t i = 0; i < v.mt_Cpst.size(); ++i)
    {
      s << indent << "  mt_Cpst[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_Cpst[i]);
    }
    s << indent << "mt_Cspd[]" << std::endl;
    for (size_t i = 0; i < v.mt_Cspd.size(); ++i)
    {
      s << indent << "  mt_Cspd[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_Cspd[i]);
    }
    s << indent << "mt_incrt[]" << std::endl;
    for (size_t i = 0; i < v.mt_incrt.size(); ++i)
    {
      s << indent << "  mt_incrt[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_incrt[i]);
    }
    s << indent << "mt_PWMduty[]" << std::endl;
    for (size_t i = 0; i < v.mt_PWMduty.size(); ++i)
    {
      s << indent << "  mt_PWMduty[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_PWMduty[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BMIROBOT_MSG_MESSAGE_ROBOT_FDCTR_H
