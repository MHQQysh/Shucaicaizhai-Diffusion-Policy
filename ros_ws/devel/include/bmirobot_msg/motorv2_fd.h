// Generated by gencpp from file bmirobot_msg/motorv2_fd.msg
// DO NOT EDIT!


#ifndef BMIROBOT_MSG_MESSAGE_MOTORV2_FD_H
#define BMIROBOT_MSG_MESSAGE_MOTORV2_FD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bmirobot_msg
{
template <class ContainerAllocator>
struct motorv2_fd_
{
  typedef motorv2_fd_<ContainerAllocator> Type;

  motorv2_fd_()
    : mt_position()
    , mt_speed()
    , mt_pwm()
    , mt_current()  {
      mt_position.assign(0);

      mt_speed.assign(0);

      mt_pwm.assign(0);

      mt_current.assign(0);
  }
  motorv2_fd_(const ContainerAllocator& _alloc)
    : mt_position()
    , mt_speed()
    , mt_pwm()
    , mt_current()  {
  (void)_alloc;
      mt_position.assign(0);

      mt_speed.assign(0);

      mt_pwm.assign(0);

      mt_current.assign(0);
  }



   typedef boost::array<int32_t, 8>  _mt_position_type;
  _mt_position_type mt_position;

   typedef boost::array<int32_t, 8>  _mt_speed_type;
  _mt_speed_type mt_speed;

   typedef boost::array<int16_t, 8>  _mt_pwm_type;
  _mt_pwm_type mt_pwm;

   typedef boost::array<int16_t, 8>  _mt_current_type;
  _mt_current_type mt_current;





  typedef boost::shared_ptr< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> const> ConstPtr;

}; // struct motorv2_fd_

typedef ::bmirobot_msg::motorv2_fd_<std::allocator<void> > motorv2_fd;

typedef boost::shared_ptr< ::bmirobot_msg::motorv2_fd > motorv2_fdPtr;
typedef boost::shared_ptr< ::bmirobot_msg::motorv2_fd const> motorv2_fdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bmirobot_msg::motorv2_fd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bmirobot_msg::motorv2_fd_<ContainerAllocator1> & lhs, const ::bmirobot_msg::motorv2_fd_<ContainerAllocator2> & rhs)
{
  return lhs.mt_position == rhs.mt_position &&
    lhs.mt_speed == rhs.mt_speed &&
    lhs.mt_pwm == rhs.mt_pwm &&
    lhs.mt_current == rhs.mt_current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bmirobot_msg::motorv2_fd_<ContainerAllocator1> & lhs, const ::bmirobot_msg::motorv2_fd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bmirobot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5d41159e774c193e38fa281a354be65";
  }

  static const char* value(const ::bmirobot_msg::motorv2_fd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5d41159e774c193ULL;
  static const uint64_t static_value2 = 0xe38fa281a354be65ULL;
};

template<class ContainerAllocator>
struct DataType< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bmirobot_msg/motorv2_fd";
  }

  static const char* value(const ::bmirobot_msg::motorv2_fd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[8] mt_position\n"
"int32[8] mt_speed\n"
"int16[8] mt_pwm\n"
"int16[8] mt_current\n"
;
  }

  static const char* value(const ::bmirobot_msg::motorv2_fd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mt_position);
      stream.next(m.mt_speed);
      stream.next(m.mt_pwm);
      stream.next(m.mt_current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motorv2_fd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bmirobot_msg::motorv2_fd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bmirobot_msg::motorv2_fd_<ContainerAllocator>& v)
  {
    s << indent << "mt_position[]" << std::endl;
    for (size_t i = 0; i < v.mt_position.size(); ++i)
    {
      s << indent << "  mt_position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_position[i]);
    }
    s << indent << "mt_speed[]" << std::endl;
    for (size_t i = 0; i < v.mt_speed.size(); ++i)
    {
      s << indent << "  mt_speed[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mt_speed[i]);
    }
    s << indent << "mt_pwm[]" << std::endl;
    for (size_t i = 0; i < v.mt_pwm.size(); ++i)
    {
      s << indent << "  mt_pwm[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.mt_pwm[i]);
    }
    s << indent << "mt_current[]" << std::endl;
    for (size_t i = 0; i < v.mt_current.size(); ++i)
    {
      s << indent << "  mt_current[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.mt_current[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BMIROBOT_MSG_MESSAGE_MOTORV2_FD_H
