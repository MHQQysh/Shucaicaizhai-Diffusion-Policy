// Generated by gencpp from file bmirobot_tools/PointsPR.msg
// DO NOT EDIT!


#ifndef BMIROBOT_TOOLS_MESSAGE_POINTSPR_H
#define BMIROBOT_TOOLS_MESSAGE_POINTSPR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bmirobot_tools
{
template <class ContainerAllocator>
struct PointsPR_
{
  typedef PointsPR_<ContainerAllocator> Type;

  PointsPR_()
    : Px()
    , Py()
    , Pz()
    , Rx()
    , Ry()
    , Rz()  {
      Px.assign(0.0);

      Py.assign(0.0);

      Pz.assign(0.0);

      Rx.assign(0.0);

      Ry.assign(0.0);

      Rz.assign(0.0);
  }
  PointsPR_(const ContainerAllocator& _alloc)
    : Px()
    , Py()
    , Pz()
    , Rx()
    , Ry()
    , Rz()  {
  (void)_alloc;
      Px.assign(0.0);

      Py.assign(0.0);

      Pz.assign(0.0);

      Rx.assign(0.0);

      Ry.assign(0.0);

      Rz.assign(0.0);
  }



   typedef boost::array<double, 4>  _Px_type;
  _Px_type Px;

   typedef boost::array<double, 4>  _Py_type;
  _Py_type Py;

   typedef boost::array<double, 4>  _Pz_type;
  _Pz_type Pz;

   typedef boost::array<double, 4>  _Rx_type;
  _Rx_type Rx;

   typedef boost::array<double, 4>  _Ry_type;
  _Ry_type Ry;

   typedef boost::array<double, 4>  _Rz_type;
  _Rz_type Rz;





  typedef boost::shared_ptr< ::bmirobot_tools::PointsPR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bmirobot_tools::PointsPR_<ContainerAllocator> const> ConstPtr;

}; // struct PointsPR_

typedef ::bmirobot_tools::PointsPR_<std::allocator<void> > PointsPR;

typedef boost::shared_ptr< ::bmirobot_tools::PointsPR > PointsPRPtr;
typedef boost::shared_ptr< ::bmirobot_tools::PointsPR const> PointsPRConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bmirobot_tools::PointsPR_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bmirobot_tools::PointsPR_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bmirobot_tools::PointsPR_<ContainerAllocator1> & lhs, const ::bmirobot_tools::PointsPR_<ContainerAllocator2> & rhs)
{
  return lhs.Px == rhs.Px &&
    lhs.Py == rhs.Py &&
    lhs.Pz == rhs.Pz &&
    lhs.Rx == rhs.Rx &&
    lhs.Ry == rhs.Ry &&
    lhs.Rz == rhs.Rz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bmirobot_tools::PointsPR_<ContainerAllocator1> & lhs, const ::bmirobot_tools::PointsPR_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bmirobot_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bmirobot_tools::PointsPR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bmirobot_tools::PointsPR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_tools::PointsPR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bmirobot_tools::PointsPR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_tools::PointsPR_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bmirobot_tools::PointsPR_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bmirobot_tools::PointsPR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f5a7d3cfad1346be5c8446784c69a6c";
  }

  static const char* value(const ::bmirobot_tools::PointsPR_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f5a7d3cfad1346bULL;
  static const uint64_t static_value2 = 0xe5c8446784c69a6cULL;
};

template<class ContainerAllocator>
struct DataType< ::bmirobot_tools::PointsPR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bmirobot_tools/PointsPR";
  }

  static const char* value(const ::bmirobot_tools::PointsPR_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bmirobot_tools::PointsPR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[4] Px\n"
"float64[4] Py\n"
"float64[4] Pz\n"
"float64[4] Rx\n"
"float64[4] Ry\n"
"float64[4] Rz\n"
;
  }

  static const char* value(const ::bmirobot_tools::PointsPR_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bmirobot_tools::PointsPR_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Px);
      stream.next(m.Py);
      stream.next(m.Pz);
      stream.next(m.Rx);
      stream.next(m.Ry);
      stream.next(m.Rz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointsPR_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bmirobot_tools::PointsPR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bmirobot_tools::PointsPR_<ContainerAllocator>& v)
  {
    s << indent << "Px[]" << std::endl;
    for (size_t i = 0; i < v.Px.size(); ++i)
    {
      s << indent << "  Px[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Px[i]);
    }
    s << indent << "Py[]" << std::endl;
    for (size_t i = 0; i < v.Py.size(); ++i)
    {
      s << indent << "  Py[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Py[i]);
    }
    s << indent << "Pz[]" << std::endl;
    for (size_t i = 0; i < v.Pz.size(); ++i)
    {
      s << indent << "  Pz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Pz[i]);
    }
    s << indent << "Rx[]" << std::endl;
    for (size_t i = 0; i < v.Rx.size(); ++i)
    {
      s << indent << "  Rx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Rx[i]);
    }
    s << indent << "Ry[]" << std::endl;
    for (size_t i = 0; i < v.Ry.size(); ++i)
    {
      s << indent << "  Ry[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Ry[i]);
    }
    s << indent << "Rz[]" << std::endl;
    for (size_t i = 0; i < v.Rz.size(); ++i)
    {
      s << indent << "  Rz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Rz[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BMIROBOT_TOOLS_MESSAGE_POINTSPR_H
