# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from eval_diffusion/robot.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot(genpy.Message):
  _md5sum = "40052a2da386ad976e3644364a1e9279"
  _type = "eval_diffusion/robot"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[9] joint_pos
float64[9] joint_spd
float64[6] eff_pose
float64[6] eff_spd
float64 timestamp
"""
  __slots__ = ['joint_pos','joint_spd','eff_pose','eff_spd','timestamp']
  _slot_types = ['float64[9]','float64[9]','float64[6]','float64[6]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_pos,joint_spd,eff_pose,eff_spd,timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_pos is None:
        self.joint_pos = [0.] * 9
      if self.joint_spd is None:
        self.joint_spd = [0.] * 9
      if self.eff_pose is None:
        self.eff_pose = [0.] * 6
      if self.eff_spd is None:
        self.eff_spd = [0.] * 6
      if self.timestamp is None:
        self.timestamp = 0.
    else:
      self.joint_pos = [0.] * 9
      self.joint_spd = [0.] * 9
      self.eff_pose = [0.] * 6
      self.eff_spd = [0.] * 6
      self.timestamp = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_9d().pack(*self.joint_pos))
      buff.write(_get_struct_9d().pack(*self.joint_spd))
      buff.write(_get_struct_6d().pack(*self.eff_pose))
      buff.write(_get_struct_6d().pack(*self.eff_spd))
      _x = self.timestamp
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 72
      self.joint_pos = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.joint_spd = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 48
      self.eff_pose = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.eff_spd = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 8
      (self.timestamp,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.joint_pos.tostring())
      buff.write(self.joint_spd.tostring())
      buff.write(self.eff_pose.tostring())
      buff.write(self.eff_spd.tostring())
      _x = self.timestamp
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 72
      self.joint_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.joint_spd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 48
      self.eff_pose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.eff_spd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 8
      (self.timestamp,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
