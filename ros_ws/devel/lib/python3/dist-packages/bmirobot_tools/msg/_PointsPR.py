# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bmirobot_tools/PointsPR.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PointsPR(genpy.Message):
  _md5sum = "5f5a7d3cfad1346be5c8446784c69a6c"
  _type = "bmirobot_tools/PointsPR"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[4] Px
float64[4] Py
float64[4] Pz
float64[4] Rx
float64[4] Ry
float64[4] Rz
"""
  __slots__ = ['Px','Py','Pz','Rx','Ry','Rz']
  _slot_types = ['float64[4]','float64[4]','float64[4]','float64[4]','float64[4]','float64[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Px,Py,Pz,Rx,Ry,Rz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PointsPR, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Px is None:
        self.Px = [0.] * 4
      if self.Py is None:
        self.Py = [0.] * 4
      if self.Pz is None:
        self.Pz = [0.] * 4
      if self.Rx is None:
        self.Rx = [0.] * 4
      if self.Ry is None:
        self.Ry = [0.] * 4
      if self.Rz is None:
        self.Rz = [0.] * 4
    else:
      self.Px = [0.] * 4
      self.Py = [0.] * 4
      self.Pz = [0.] * 4
      self.Rx = [0.] * 4
      self.Ry = [0.] * 4
      self.Rz = [0.] * 4

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4d().pack(*self.Px))
      buff.write(_get_struct_4d().pack(*self.Py))
      buff.write(_get_struct_4d().pack(*self.Pz))
      buff.write(_get_struct_4d().pack(*self.Rx))
      buff.write(_get_struct_4d().pack(*self.Ry))
      buff.write(_get_struct_4d().pack(*self.Rz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 32
      self.Px = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.Py = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.Pz = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.Rx = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.Ry = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.Rz = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.Px.tostring())
      buff.write(self.Py.tostring())
      buff.write(self.Pz.tostring())
      buff.write(self.Rx.tostring())
      buff.write(self.Ry.tostring())
      buff.write(self.Rz.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 32
      self.Px = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.Py = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.Pz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.Rx = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.Ry = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.Rz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
